{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compose Requests A library that makes it easy to interact with server responses. Connection repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.response:compose-requests:{version}\") } Features Response result Response states Request handler License Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#compose-requests","text":"A library that makes it easy to interact with server responses.","title":"Compose Requests"},{"location":"#connection","text":"repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.response:compose-requests:{version}\") }","title":"Connection"},{"location":"#features","text":"Response result Response states Request handler","title":"Features"},{"location":"#license","text":"Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"request_handler/","text":"Feature for processing requests. Global single subscription for error handling. Usage singleCollect // Listen global errors responses init { viewModelScope.launch { RequestHandler.singleCollect { val message = it.message ?: context.getString(R.string.error_something_wrong) // show toast Toast.makeText(context, message, Toast.LENGTH_LONG).show() // logcat Timber.e(it) } } } Usage executeRequest /** * Mapper response single model */ fun UserResponse.toModel(): UserModel { return UserModel( id = id.toString(), login = login ?: \"\", ) } /** * Mapper response list models */ fun List<UserResponse>.toModels(): List<UserModel> { return map { it.toModel() } } /** * Interface retrofit api */ @GET(\"/user\") suspend fun getUser(): Response<UserResponse> /** * Service request */ suspend fun getUserModel(): ResponseResult<UserModel> { return withContext(Dispatchers.IO) { executeRequest(emit = true /* emit global error or not */) { api.getUser().body()!!.toModel() } } }","title":"Request handler"},{"location":"request_handler/#usage-singlecollect","text":"// Listen global errors responses init { viewModelScope.launch { RequestHandler.singleCollect { val message = it.message ?: context.getString(R.string.error_something_wrong) // show toast Toast.makeText(context, message, Toast.LENGTH_LONG).show() // logcat Timber.e(it) } } }","title":"Usage singleCollect"},{"location":"request_handler/#usage-executerequest","text":"/** * Mapper response single model */ fun UserResponse.toModel(): UserModel { return UserModel( id = id.toString(), login = login ?: \"\", ) } /** * Mapper response list models */ fun List<UserResponse>.toModels(): List<UserModel> { return map { it.toModel() } } /** * Interface retrofit api */ @GET(\"/user\") suspend fun getUser(): Response<UserResponse> /** * Service request */ suspend fun getUserModel(): ResponseResult<UserModel> { return withContext(Dispatchers.IO) { executeRequest(emit = true /* emit global error or not */) { api.getUser().body()!!.toModel() } } }","title":"Usage executeRequest"},{"location":"response_result/","text":"Response processing class. Checks response val response = apiService.getUserFollowers( page = 1, ) // get size response.size // check is empty response response.isEmpty // check is error response response.isError // check is success response response.isSucceeded Callbacks response val response = apiService.getUserFollowers( page = 1, ) // success response response.success { // it - data response } // empty success response response.empty { } // error network response.errorUnknownHost { // it - exception } // error timeout response.errorTimeout { // it - exception } // errors without error network & timeout response.error { // it - exception } // callback success or error anyway response.done { // query stop }","title":"Response result"},{"location":"response_result/#checks-response","text":"val response = apiService.getUserFollowers( page = 1, ) // get size response.size // check is empty response response.isEmpty // check is error response response.isError // check is success response response.isSucceeded","title":"Checks response"},{"location":"response_result/#callbacks-response","text":"val response = apiService.getUserFollowers( page = 1, ) // success response response.success { // it - data response } // empty success response response.empty { } // error network response.errorUnknownHost { // it - exception } // error timeout response.errorTimeout { // it - exception } // errors without error network & timeout response.error { // it - exception } // callback success or error anyway response.done { // query stop }","title":"Callbacks response"},{"location":"response_states/","text":"Handling request states in compose States Start - Start state Action - Query in action Error - Response error Success - Response success with data response Usage in ViewModel /** * State query */ val query1 = ResponseStates(this) /** * Query fun in viewModel */ private fun signInCode(code: String) { query1.queryLaunch { apiService.oauthCode(code = code).success { AuthUser.login(it) } } } You can added custom error handler /** * Custom error handler */ fun errorHandler(exception: Exception): ResponseState { return when (exception) { is ResponseException -> ResponseState.Error(exception) else -> ResponseState.Error(ResponseException.ExceptionUnknown()) } } /** * State actions */ val query1 = ResponseStates(this, ::errorHandler) Usage in Jetpack Compose val state1 by viewModel.query1.state.collectAsState() ResponseComposable(state1) { when (this) { is ResponseState.Start -> { // start page } is ResponseState.Action -> { // start loader } is ResponseState.Success<*> -> { when(data) { is UserModel -> { // success query user model } else -> { // success other } } } is ResponseState.Error -> { when(exception) { is UnknownHostException -> { // error network } else -> { // errors other } } } } }","title":"Response states"},{"location":"response_states/#states","text":"Start - Start state Action - Query in action Error - Response error Success - Response success with data response","title":"States"},{"location":"response_states/#usage-in-viewmodel","text":"/** * State query */ val query1 = ResponseStates(this) /** * Query fun in viewModel */ private fun signInCode(code: String) { query1.queryLaunch { apiService.oauthCode(code = code).success { AuthUser.login(it) } } } You can added custom error handler /** * Custom error handler */ fun errorHandler(exception: Exception): ResponseState { return when (exception) { is ResponseException -> ResponseState.Error(exception) else -> ResponseState.Error(ResponseException.ExceptionUnknown()) } } /** * State actions */ val query1 = ResponseStates(this, ::errorHandler)","title":"Usage in ViewModel"},{"location":"response_states/#usage-in-jetpack-compose","text":"val state1 by viewModel.query1.state.collectAsState() ResponseComposable(state1) { when (this) { is ResponseState.Start -> { // start page } is ResponseState.Action -> { // start loader } is ResponseState.Success<*> -> { when(data) { is UserModel -> { // success query user model } else -> { // success other } } } is ResponseState.Error -> { when(exception) { is UnknownHostException -> { // error network } else -> { // errors other } } } } }","title":"Usage in Jetpack Compose"}]}